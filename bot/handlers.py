import asyncio
import re
import os
from aiogram import Router, Bot, F
from aiogram.enums import ChatAction, ParseMode, ChatType
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, ChatMemberUpdated, CallbackQuery
from telegramify_markdown import markdownify
from telegramify_markdown.customize import get_runtime_config
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.rate_limiter import rateLimiter
from bot.api.deepseek import call_deepseek_api
from bot.api.ergpt import send_ergpt_message, create_ergpt_chat, delete_ergpt_chat
from bot.auth import authorize_user
from bot.repository.chats_repository import get_chat_for_user, set_chat_for_user, get_updateat_for_user, \
    set_updateat_for_chat, ensure_user_exists, ensure_chat_deleted, set_chat_deleted
from bot.repository.user_repository import get_userid_by_tguser, get_all_admin_users
markdown_symbol = get_runtime_config().markdown_symbol
markdown_symbol.head_level_1 = ""
markdown_symbol.head_level_2 = ""
markdown_symbol.head_level_3 = ""

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–∞
MAX_REQUESTS = 1 # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç 1 —á–µ–ª–æ–≤–µ–∫–∞
TIME_WINDOW = 5 # —Ç–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
REDIS_URL = os.getenv("REDIS_HOST")  # URL Redis —Å–µ—Ä–≤–µ—Ä–∞
MAX_GLOBAL = 10 # –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–¥–ª–µ–∞—Ç—å –∑–∞–ø—Ä–æ—Å

limiter = rateLimiter(max_requests = MAX_REQUESTS, window = TIME_WINDOW, redis_url = REDIS_URL, max_global = MAX_GLOBAL)

def escape_markdown(text: str) -> str:
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

class DeepSeekStates(StatesGroup):
    # –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    waiting_for_question = State()

class SupportStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_admin_reply = State()



@router.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ergpt bot.\n"
        f"–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á—É!"
    )

@router.message(Command("help"), F.chat.type == ChatType.PRIVATE)
async def command_help_handler(message: Message) -> None:
    help_text = (
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É Ergpt*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–∞—Ç–∞\n"
        "/support - –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å ergpt –≤ –±–µ—Å–µ–¥—É\n"
        "/deepseek - –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ deepseek (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤ deepseek, –Ω–æ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:\n"
        "* –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è\n"
        "* –î–æ–±–∞–≤–∏—Ç—å –≤ –±–µ—Å–µ–¥—É –º–æ–¥–µ–ª—å –Ω–µ–ª—å–∑—è\n"
        "* –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏\n"
    )
    await message.answer(help_text)

@router.message(Command("support"))
async def command_support_handler(message: Message, state: FSMContext) -> None:
    await message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å, —è –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É")
    await state.set_state(SupportStates.waiting_for_message)

@router.message(SupportStates.waiting_for_message, F.chat.type == ChatType.PRIVATE)
async def handle_support_message(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    message_text = f"‚ùó –í–∞–º –ø—Ä–∏—à–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.chat.username}:\n\n {message.text}"
    admin_users = await get_all_admin_users()
    if admin_users:
        reply_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_user_{user_id}")]]
        )
        for admin in admin_users:
            await bot.send_message(admin['telegram_id'], message_text, reply_markup=reply_keyboard )
    await message.answer("üëå –°–ø–∞—Å–∏–±–æ, –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()

@router.callback_query(F.data.startswith("reply_to_user_"))
async def handle_reply_button(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await state.update_data(target_user_id=user_id)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    await state.set_state(SupportStates.waiting_for_admin_reply)
    await callback.answer()

@router.message(SupportStates.waiting_for_admin_reply, F.chat.type == ChatType.PRIVATE)
async def handle_admin_reply(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    target_user_id = data.get("target_user_id")
    if not target_user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å.")
        return
    try:
        await bot.send_message(
            target_user_id,
            f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")

    await state.clear()

@router.message(Command("add"), F.chat.type == ChatType.PRIVATE)
async def command_add_handler(message: Message) -> None:
    if not await authorize_user(message):
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç üëá",
                url="https://t.me/Ergpt_test_bot?startgroup=start"
            )]
        ]
    )
    await message.answer("üòá –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç ‚Äî —è –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π!", reply_markup=keyboard)

@router.message(Command("deepseek"), F.chat.type == ChatType.PRIVATE)
async def command_change_handler(message: Message, state: FSMContext) -> None:
    await message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—é –æ—Ç–≤–µ—Ç –æ—Ç deepseek")
    await state.set_state(DeepSeekStates.waiting_for_question)

@router.message(Command("restart"), F.chat.type == ChatType.PRIVATE)
async def command_restart_handler(message: Message) -> None:
    if not await authorize_user(message):
        return
    user_id = await get_user(str(message.chat.id))
    ergpt_chat_id = await get_chat_for_user(user_id)
    text = "üò¥–£–ø—Å, –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    if ergpt_chat_id is not None:
        response = await delete_ergpt_chat(ergpt_chat_id)
        if response is not None:
            await set_chat_deleted(user_id)
            text = (
                "üòâ–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞\n"
                "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É!"
            )
    await message.answer(text)

@router.message(DeepSeekStates.waiting_for_question, F.chat.type == ChatType.PRIVATE)
async def handle_deepseek(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id

    allowed = await limiter.is_allowed(user_id)
    if not allowed:
        await message.reply("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    global_allowed = await limiter.is_global_limit_allowed()
    if not global_allowed:
        await message.reply("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    chat_id = message.chat.id
    text = message.text.strip()

    async def show_typing():
        while True:
            await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(4)

    typing_task = asyncio.create_task(show_typing())
    try:
        reply = await call_deepseek_api(text)
    except Exception as e:
        escaped_error = escape_markdown(str(e))
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek: {escaped_error}")
        return
    finally:
        typing_task.cancel()
        await state.clear()

    tg_md = markdownify(reply, max_line_length=None, normalize_whitespace=False)
    await message.reply(tg_md, parse_mode=ParseMode.MARKDOWN_V2)
    await message.answer("üòå –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å —É deepseek –Ω–∞–ø–∏—à–∏—Ç–µ /deepseek –ø–æ–≤—Ç–æ—Ä–Ω–æ.")


@router.message(F.chat.type == ChatType.PRIVATE)
async def handle_ergpt(message: Message, bot: Bot):
    if not await authorize_user(message):
        return
    tguser_id = message.from_user.id

    allowed = await limiter.is_allowed(tguser_id)
    if not allowed:
        await message.reply("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    global_allowed = await limiter.is_global_limit_allowed()
    if not global_allowed:
        await message.reply("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    chat_id = message.chat.id
    text = message.text.strip()
    async def show_typing():
        while True:
            await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(4)
    typing_task = asyncio.create_task(show_typing())

    user_id = await get_user(str(tguser_id)) # –Ω–∞—Ö–æ–¥–∏–º id –Ω–∞—à–µ–≥–æ —é–∑–µ—Ä–æ–∞ –ø–æ —Ç–≥ id
    await check_user(user_id) # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    ergpt_chat_id = await get_chat_for_user(user_id) # –∏—â–µ–º —á–∞—Ç –¥–ª—è —é–∑–µ—Ä–∞
    if ergpt_chat_id == 1: # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ –±—ã–ª–æ —á–∞—Ç–∞, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        ergpt_chat_id = await create_ergpt_chat_for_user(user_id)
    else:
        updated_at = await get_updated_at(user_id)
        if updated_at is not None and await is_deleted_chat_by_user(user_id): # –µ—Å–ª–∏ —á–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            await delete_ergpt_chat(ergpt_chat_id) # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —á–∞—Ç
            ergpt_chat_id = await create_ergpt_chat_for_user(user_id)
        else: #–∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–µ–Ω–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
            await set_updated_at(user_id)
    try:
        reply = await send_ergpt_message(chat_id = ergpt_chat_id, msg = text)
        if reply is None:
            await message.reply("üò¥–£–ø—Å, –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    except Exception as e:
        escaped_error = escape_markdown(str(e))
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ergpt: {escaped_error}")
        return
    finally:
        typing_task.cancel()

    tg_md = markdownify(reply, max_line_length=None, normalize_whitespace=False)
    await message.reply(tg_md, parse_mode=ParseMode.MARKDOWN_V2)

async def create_ergpt_chat_for_user(user_id: int):
    assistant_id = 14  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫
    ergpt_chat_id = await create_ergpt_chat(assistant_id)
    await set_chat_for_user(user_id, ergpt_chat_id)
    return ergpt_chat_id

async def get_updated_at(user_id):
    return await get_updateat_for_user(user_id)

async def set_updated_at(user_id):
    await set_updateat_for_chat(user_id)
    return True

async def get_user(tguser_id):
    return await get_userid_by_tguser(tguser_id)

async def check_user(user_id):
    await ensure_user_exists(user_id)
    return True
async def is_deleted_chat_by_user(user_id: int):
    return await ensure_chat_deleted(user_id)

async def delete_chat(user_id: int):
    await set_chat_deleted(user_id)
