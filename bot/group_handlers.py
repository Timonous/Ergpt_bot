import re

from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command, ChatMemberUpdatedFilter
from aiogram.types import ChatMemberUpdated, Message
from aiogram.enums import ChatType, ChatMemberStatus, ParseMode
from telegramify_markdown import markdownify

from bot.auth import group_authorize_user
from bot.handlers import limiter

from bot.repository.group_chats_repository import get_chat_for_group, set_chat_for_group, get_updateat_for_group, \
    set_updateat_for_chat, ensure_group_exists, ensure_chat_deleted, set_chat_deleted
from bot.api.ergpt import send_ergpt_message, create_ergpt_chat, delete_ergpt_chat


router = Router()

def escape_markdown(text: str) -> str:
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

@router.message(CommandStart(), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def group_start_handler(message: Message) -> None:
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø Ergpt –±–æ—Ç, –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫.\n"
        f"–ù–∞–ø–∏—à–∏ –º–æ–µ –∏–º—è Ergpt –∏–ª–∏ –≠—Ä–≥–ø—Ç —Å–æ —Å–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É!"
    )

@router.message(Command("help"), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def group_help_handler(message: Message) -> None:
    help_text = (
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É Ergpt*\n\n"
        "ü§ñ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ 'Ergpt' –∏–ª–∏ '–≠—Ä–≥–ø—Ç', –∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Ergpt\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ:\n"
        "/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–∞—Ç–∞\n"
        "/support - –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        "‚ùó –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≠—Ä-—Ç–µ–ª–µ–∫–æ–º.\n"
        "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç @Ergpt_test_bot –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await message.answer(help_text)

@router.message(
    Command("restart"),
    F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP} & (~F.is_topic_message)) # –≤–æ–∑–º–æ–∂–Ω –æ–æ—à–∏–±–∫–∞ —Å–æ —Å–∫–æ–±–∫–∞–º–∏
)
async def group_restart_handler(message: Message) -> None:
    if not await group_authorize_user(message):
        return
    group_id = message.chat.id
    ergpt_chat_id = await get_chat_for_group(group_id)
    text = "üò¥–£–ø—Å, –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    if ergpt_chat_id is not None:
        response = await delete_ergpt_chat(ergpt_chat_id)
        if response is not None:
            await set_chat_deleted(group_id)
            text = (
                "üòâ–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞\n"
                "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É!"
            )
    await message.answer(text)
    #–†–∞—Å–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ –µ—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –≤ ergpt

@router.message(
    (
        F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP})
        & (~F.is_topic_message)
        & (F.text.contains("Ergpt") | F.text.contains("–≠—Ä–≥–ø—Ç") | F.text.contains("ergpt") | F.text.contains("—ç—Ä–≥–ø—Ç") | F.reply_to_message.from_user.id)
    )
)
async def group_handle_ergpt(message: Message, bot: Bot):
    if not await group_authorize_user(message):
        return
    group_id = message.chat.id
    #–¢—É—Ç –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    allowed = await limiter.is_allowed(group_id)
    if not allowed:
        await message.reply("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    global_allowed = await limiter.is_global_limit_allowed()
    if not global_allowed:
        await message.reply("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = message.text.strip()

    await check_group(group_id)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    ergpt_chat_id = await get_chat_for_group(group_id)  # –∏—â–µ–º —á–∞—Ç –¥–ª—è —é–∑–µ—Ä–∞
    if ergpt_chat_id == 1:  # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ –±—ã–ª–æ —á–∞—Ç–∞, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        ergpt_chat_id = await create_ergpt_chat_for_group(group_id)
    else:
        updated_at = await get_updated_at(group_id)
        if updated_at is not None and await is_deleted_chat_by_group(group_id):  # –µ—Å–ª–∏ —á–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            await delete_ergpt_chat(ergpt_chat_id)  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —á–∞—Ç
            ergpt_chat_id = await create_ergpt_chat_for_group(group_id)
        else:  # –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–µ–Ω–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
            await set_updated_at(group_id)
    try:
        reply = await send_ergpt_message(chat_id=ergpt_chat_id, msg=text)
        if reply is None:
            await message.reply("üò¥–£–ø—Å, –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    except Exception as e:
        escaped_error = escape_markdown(str(e))
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ergpt: {escaped_error}")
        return

    tg_md = markdownify(reply, max_line_length=None, normalize_whitespace=False)
    await message.reply(tg_md, parse_mode=ParseMode.MARKDOWN_V2)

async def create_ergpt_chat_for_group(group_id: int):
    assistant_id = 14  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫
    ergpt_chat_id = await create_ergpt_chat(assistant_id)
    await set_chat_for_group(group_id, ergpt_chat_id)
    return ergpt_chat_id

async def get_updated_at(group_id):
    return await get_updateat_for_group(group_id)

async def set_updated_at(group_id):
    await set_updateat_for_chat(group_id)
    return True

async def check_group(group_id):
    await ensure_group_exists(group_id)
    return True

async def is_deleted_chat_by_group(group_id: int):
    return await ensure_chat_deleted(group_id)

async def delete_chat(group_id: int):
    await set_chat_deleted(group_id)