from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from asyncpg import Pool
import re

router = Router()
db_pool: Pool = None

def set_db_pool(pool: Pool):
    global db_pool
    db_pool = pool

def normalize_phone_number(raw_phone: str) -> str:
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    digits = re.sub(r'\D', '', raw_phone)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 8xxxxxxxxxx ‚Üí +7xxxxxxxxxx
    if digits.startswith('8') and len(digits) == 11:
        return '+7' + digits[1:]
    elif digits.startswith('7') and len(digits) == 11:
        return '+7' + digits[1:]
    elif digits.startswith('9') and len(digits) == 10:
        return '+7' + digits
    elif digits.startswith('7') and len(digits) == 10:
        return '+7' + digits[1:]
    elif digits.startswith('89') and len(digits) == 11:
        return '+7' + digits[1:]
    elif digits.startswith('79') and len(digits) == 11:
        return '+7' + digits[1:]
    elif digits.startswith('7') and len(digits) == 11:
        return '+7' + digits[1:]
    elif digits.startswith('') and len(digits) == 10:
        return '+7' + digits
    else:
        return '+' + digits  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

async def is_user_registered(telegram_id: int) -> bool:
    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE telegramid = $1", str(telegram_id))
        return user is not None

async def authorize_user(message: Message) -> bool:
    if await is_user_registered(message.chat.id):
        return True
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer(
    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ergpt bot.\n\n"
        "‚≠ê–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–∏–º —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏üëá",
        reply_markup=keyboard
    )
    return False

@router.message(F.contact)
async def handle_contact(message: Message):
    contact = message.contact
    raw_phone = contact.phone_number
    phone = normalize_phone_number(raw_phone)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º

    async with db_pool.acquire() as conn:
        # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ staff –ø–æ –Ω–æ–º–µ—Ä—É –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ isemployed
        staff = await conn.fetchrow("SELECT * FROM staff WHERE phone = $1", phone)
        if not staff:
            await message.answer(
                "üò¥ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –≠–†-–¢–µ–ª–µ–∫–æ–º",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        if staff.get("isemployed") is False:
            await message.answer(
                "üò¥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –≠–†-–¢–µ–ª–µ–∫–æ–º",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute("INSERT INTO users (telegramid, phone, staffid) VALUES ($1, $2, $3)", str(message.chat.id), phone, staff.get("id"))
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á—É!",
            reply_markup=ReplyKeyboardRemove()
        )